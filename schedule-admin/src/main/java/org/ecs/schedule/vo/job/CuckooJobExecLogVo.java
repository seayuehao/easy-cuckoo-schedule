package org.ecs.schedule.vo.job;

import lombok.Getter;
import lombok.Setter;
import org.apache.commons.lang3.builder.ReflectionToStringBuilder;

@Getter
@Setter
public class CuckooJobExecLogVo {

    /**
     * 标准ID -- cuckoo_job_exec_log.id
     */
    private Long id;

    /**
     * 任务ID -- cuckoo_job_exec_log.job_id
     */
    private Long jobId;

    /**
     * 分组ID -- cuckoo_job_exec_log.group_id
     */
    private Long groupId;

    private String groupName;

    /**
     * 任务类型 -- cuckoo_job_detail.exec_job_type
     */
    private String execJobType;

    private String execJobTypeDesc;

    /**
     * 作业执行应用名 -- cuckoo_job_exec_log.job_class_application
     */
    private String jobClassApplication;

    /**
     * 任务名称 -- cuckoo_job_exec_log.job_name
     */
    private String jobName;

    private String jobDesc;

    /**
     * 触发类型 -- cuckoo_job_exec_log.trigger_type
     */
    private String triggerType;

    private String triggerTypeDesc;

    /**
     * 是否为日切任务 -- cuckoo_job_exec_log.type_daily
     */
    private String typeDaily;

    private String typeDailyDesc;

    /**
     * cron任务表达式 -- cuckoo_job_exec_log.cron_expression
     */
    private String cronExpression;

    /**
     * 任务执行业务日期 -- cuckoo_job_exec_log.tx_date
     */
    private Integer txDate;

    /**
     * 流式任务上一次时间参数 -- cuckoo_job_exec_log.flow_last_time
     */
    private Long flowLastTime;

    private String flowLastTimeDesc;

    /**
     * 流式任务当前时间参数 -- cuckoo_job_exec_log.flow_cur_time
     */
    private Long flowCurTime;

    private String flowCurTimeDesc;

    /**
     * 并发/集群任务参数 -- cuckoo_job_exec_log.cuckoo_parallel_job_args
     */
    private String cuckooParallelJobArgs;

    /**
     * 任务开始时间 -- cuckoo_job_exec_log.job_start_time
     */
    private Long jobStartTime;

    private String jobStartTimeDesc;


    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column cuckoo_job_exec_log.job_exec_time
     */
    private Long jobExecTime;

    private String jobExecTimeDesc;

    /**
     * 任务结束时间 -- cuckoo_job_exec_log.job_end_time
     */
    private Long jobEndTime;
    private String jobEndTimeDesc;

    /**
     * 执行状态 -- cuckoo_job_exec_log.exec_job_status
     */
    private String execJobStatus;
    private String execJobStatusDesc;

    /**
     * 执行器IP -- cuckoo_job_exec_log.cuckoo_client_ip
     */
    private String cuckooClientIp;

    /**
     * 客户端标识 -- cuckoo_job_exec_log.cuckoo_client_tag
     */
    private String cuckooClientTag;

    /**
     * 最近检查时间 -- cuckoo_job_exec_log.latest_check_time
     */
    private Long latestCheckTime;

    /**
     * 是否触发下级任务 -- cuckoo_job_exec_log.need_triggle_next
     */
    private Boolean needTriggleNext;

    private String needTriggleNextDesc;

    /**
     * 是否强制触发 -- cuckoo_job_exec_log.force_triggle
     */
    private Boolean forceTriggle;

    private String forceTriggleDesc;

    /**
     * 备注 -- cuckoo_job_exec_log.remark
     */
    private String remark;


    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((id == null) ? 0 : id.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        CuckooJobExecLogVo other = (CuckooJobExecLogVo) obj;
        if (id == null) {
            if (other.id != null)
                return false;
        } else if (!id.equals(other.id))
            return false;
        return true;
    }

    public String toString() {
        return ReflectionToStringBuilder.toString(this);
    }

}
